//
// Drast Programming Language Examples
//

import io

struct Lexer {
    private string source
    private int line
    private int column

    private int start
    private int index

    vector@(Token) tokens

    @(string source) {
        self.source = source
        self.line = 1
        self.column = 1
        test = ~test
        ~test = 40
        self.index = 0
        self.start = self.index
    }

    ~() {
        free(self.source)
        Lexer.deinit()
    }

    void :: lex() {
        for (Token token = getToken(), token.type != .eof, token = getToken()) {
            self.tokens.push_back(token)
        }

        self.tokens.push_back(returnToken(.eof))
    }

    Token :: getToken() {
        self.skipWhitespace()
        self.start = self.index

        switch (self.current()) {
        case '"':
            return self.string_()
        case '\'':
            return self.character()
        case ' ':
            break
        case '\r':
            break
        case '\t':
            break
        case '\n':
            break
        case '?':
            return returnToken(.question)
        case '<':
            if (self.peek() == '<') {
                self.advance()
                return returnEqualToken(.bitwise_shift_left, .bitwise_shift_left_equal)
            }

            return self.returnEqualToken(.less, .less_equal)
        case '>':
            if (self.peek() == '>') {
                self.advance()
                return returnEqualToken(.bitwise_shift_right, .bitwise_shift_right_equal)
            }

            return self.returnEqualToken(.greater, .greater_equal)
        case '=':
            return self.returnEqualToken(.equal, .equal_equal)
        case '!':
            return self.returnEqualToken(.not, .not_equal)
        case '+':
            return self.returnEqualToken(.plus, .plus_equal)
        case '-':
            return self.returnEqualToken(.minus, .minus_equal)
        case '*':
            return self.returnEqualToken(.asterisk, .asterisk_equal)
        case '/':
            if (peek_next() == '/') {
                self.skipLine()
                return self.getToken()
            } else if (peek_next() == '*') {
                self.skipBlockComment()
                return self.getToken()
            }
            return self.returnEqualToken(.slash, .slash_equal)

        case '%':
            return self.returnEqualToken(.percent, .percent_equal)

        case '&':
            if (self.peek_next() == '&') {
                self.advance()
                return self.returnEqualToken(.and_and, .and_and_equal)
            }

            return self.returnEqualToken(.and, .and_equal)

         case '|':
            if (self.peek_next() == '|') {
                self.advance()
                return self.returnEqualToken(.pipe_pipe, .pipe_pipe_equal)
            }

            return self.returnEqualToken(.pipe, .pipe_equal)

        case '^':
            return self.returnEqualToken(.power, .power_equal)

        case '~':
            return self.returnToken(.not)

        case ':':
            if (peek_next() == ':') {
                self.advance()
                return self.returnToken(.double_colon)
            }
            return self.returnToken(.colon)

        case ';':
            return self.returnToken(.semicolon)

        case '(':
            return self.returnToken(.open_paren)
        case ')':
            return self.returnToken(.close_paren)
        case '[':
            return self.returnToken(.open_square)
        case ']':
            return self.returnToken(.close_square)
        case '{':
            return self.returnToken(.open_curly)
        case '}':
            return self.returnToken(.close_curly)
        case ',':
            return self.returnToken(.comma)
        case '.':
            return self.returnToken(.dot)
        case '$':
            return self.returnToken(.dollar)
        case '#':
            return self.returnToken(.hashtag)
        case '@':
            return self.returnToken(.at)
        case '\\':
            return self.returnToken(.backslash)
        case '\0':
            break
        default:
            throw("Unexpected Character")
        }

        return self.returnWithoutAdvance(.eof)
    }

    void :: skipWhitespace() {
        while (self.current() == ' ' || self.current() == '\r' || self.current() == '\t' || self.current() == '\n') {
            if (self.current() == '\n') {
                self.line += 1
                self.column = 1
            } else {
                self.column += 1
            }

            self.advance()
        }
    }

    void :: skipLine() {
        while (self.current() != '\n') {
            self.advance()
        }
    }

    void :: skipBlockComment() {
        self.advance()
        self.advance()

    while_loop:
        while (self.current() != '*') {
            if (self.current() == '\n') {
                self.location.line += 1
                self.location.column = 1
            }
            self.advance()

            if (self.current() == '\0') {
                throw("Unterminated Block Comment")
            }
        }

        self.advance()
        if (self.current == '/') {
            self.advance()
            return
        } else {
            goto while_loop
        }
    }

    void :: advance() {
        self.column += 1
        self.index += 1
    }

    char :: current() {
        return self.source.at(self.index)
    }

    char :: peek() {
        return self.source.at(self.index + 1)
    }


    Token :: returnToken(TokenType type) {
        Token token = Token.init(type, .init(self.current()), self.location)
        self.advance()
        return token
    }

    Token :: returnEqualToken(TokenType type1, TokenType type2) {
        if (peek_next() == '=') {
            self.advance()
            return returnToken(type2)
        }

        return returnToken(type1)
    }

    Token :: returnWithoutAdvance(TokenType type) {
        return Token.init(type, .init(self.current()), self.location)
    }

    // Token :: lexWhile(TokenType type, $bool() predicate, bool is_string) {
        
    // }

    Token :: testFunction($bool(int, bool) predicate) { $(int a, bool b)

    }

    void :: myOtherFunction() {
        testFunction(!{ $(int a, bool b)
            return true
        }, 5+30)
    }
}