{
  "note": "Most of this code is copied off of 'https://github.com/microsoft/vscode/blob/main/extensions/cpp/syntaxes/c.tmLanguage.json'",
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Drast",
  "scopeName": "source.drast",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#switch_statements"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#storage_types"
    },
    {
      "include": "#modifiers"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#characters"
    },
    {
      "include": "#function_call"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.documentation.drast",
          "begin": "(?:^)(?>\\s*)(\\/\\/[!\\/]+)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.documentation.drast"
            }
          },
          "end": "(?<=\\n)(?<!\\\\\\n)",
          "patterns": [
            {
              "include": "#line_continuation_character"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.drast"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.drast"
                },
                "2": {
                  "name": "markup.italic.doxygen.drast"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.drast"
                },
                "2": {
                  "name": "markup.bold.doxygen.drast"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.drast"
                },
                "2": {
                  "name": "markup.inline.raw.string.drast"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.drast"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.drast"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.drast"
                },
                "2": {
                  "patterns": [
                    {
                      "match": "in|out",
                      "name": "keyword.other.parameter.direction.$0.drast"
                    }
                  ]
                },
                "3": {
                  "name": "variable.parameter.drast"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.drast"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.drast"
            },
            {
              "match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
              "name": "storage.type.class.gtkdoc"
            }
          ]
        },
        {
          "match": "(\\/\\*[!*]+(?=\\s))(.+)([!*]*\\*\\/)",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.begin.documentation.drast"
            },
            "2": {
              "patterns": [
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.drast"
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.drast"
                    },
                    "2": {
                      "name": "markup.italic.doxygen.drast"
                    }
                  }
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.drast"
                    },
                    "2": {
                      "name": "markup.bold.doxygen.drast"
                    }
                  }
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.drast"
                    },
                    "2": {
                      "name": "markup.inline.raw.string.drast"
                    }
                  }
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.drast"
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.drast"
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.drast"
                    },
                    "2": {
                      "patterns": [
                        {
                          "match": "in|out",
                          "name": "keyword.other.parameter.direction.$0.drast"
                        }
                      ]
                    },
                    "3": {
                      "name": "variable.parameter.drast"
                    }
                  }
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.drast"
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.drast"
                },
                {
                  "match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
                  "name": "storage.type.class.gtkdoc"
                }
              ]
            },
            "3": {
              "name": "punctuation.definition.comment.end.documentation.drast"
            }
          },
          "name": "comment.block.documentation.drast"
        },
        {
          "name": "comment.block.documentation.drast",
          "begin": "((?>\\s*)\\/\\*[!*]+(?:(?:\\n|$)|(?=\\s)))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.begin.documentation.drast"
            }
          },
          "end": "([!*]*\\*\\/)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.end.documentation.drast"
            }
          },
          "patterns": [
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.drast"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.drast"
                },
                "2": {
                  "name": "markup.italic.doxygen.drast"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.drast"
                },
                "2": {
                  "name": "markup.bold.doxygen.drast"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.drast"
                },
                "2": {
                  "name": "markup.inline.raw.string.drast"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.drast"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.drast"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]param)(?:\\s*\\[((?:,?\\s*(?:in|out)\\s*)+)\\])?\\s+(\\b\\w+\\b)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.drast"
                },
                "2": {
                  "patterns": [
                    {
                      "match": "in|out",
                      "name": "keyword.other.parameter.direction.$0.drast"
                    }
                  ]
                },
                "3": {
                  "name": "variable.parameter.drast"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.drast"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.drast"
            },
            {
              "match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
              "name": "storage.type.class.gtkdoc"
            }
          ]
        },
        {
          "match": "^\\/\\* =(\\s*.*?)\\s*= \\*\\/$\\n?",
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.block.drast"
            }
          },
          "name": "comment.block.banner.drast"
        },
        {
          "name": "comment.block.drast",
          "begin": "(\\/\\*)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.begin.drast"
            }
          },
          "end": "(\\*\\/)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.end.drast"
            }
          }
        },
        {
          "match": "^\\/\\/ =(\\s*.*?)\\s*=$\\n?",
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.line.drast"
            }
          },
          "name": "comment.line.banner.drast"
        },
        {
          "begin": "^\\/\\/",
          "end": "$",
          "name": "comment.line.drast"
        },
        {
          "match": "(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/))",
          "captures": {
            "1": {
              "name": "comment.block.drast punctuation.definition.comment.begin.drast"
            },
            "2": {
              "name": "comment.block.drast"
            },
            "3": {
              "patterns": [
                {
                  "match": "\\*\\/",
                  "name": "comment.block.c punctuation.definition.comment.end.drast"
                },
                {
                  "match": "\\*",
                  "name": "comment.block.drast"
                }
              ]
            }
          }
        }
      ]
    },
    "switch_statements": {
      "name": "meta.block.switch.drast",
      "begin": "(((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)switch(?!\\w)))",
      "beginCaptures": {
        "1": {
          "name": "meta.head.switch.drast"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.c punctuation.definition.comment.begin.drast"
        },
        "4": {
          "name": "comment.block.drast"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.c punctuation.definition.comment.end.drast"
            },
            {
              "match": "\\*",
              "name": "comment.block.drast"
            }
          ]
        },
        "6": {
          "name": "keyword.control.switch.drast"
        }
      },
      "end": "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))",
      "patterns": [
        {
          "name": "meta.head.switch.drast",
          "begin": "\\G ?",
          "end": "((?:\\{|<%|\\?\\?<|(?=;)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.bracket.curly.switch.drast"
            }
          },
          "patterns": [
            {
              "include": "#switch_conditional_parentheses"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.body.switch.drast",
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "(\\}|%>|\\?\\?>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.bracket.curly.switch.drast"
            }
          },
          "patterns": [
            {
              "include": "#default_statement"
            },
            {
              "include": "#case_statement"
            },
            {
              "include": "$self"
            },
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "name": "meta.tail.switch.drast",
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s\\n]*",
          "end": "[\\s\\n]*(?=;)",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "keywords": {
      "name": "keyword.control.drast",
      "match": "@|~|\\b(self|typealias|return|if|else|import|volatile|cast|extern|operator|switch|case|break|default|while|for|continue|typeof|false|true|goto|private|do|try|catch|throw|import)\\b"
    },
    "storage_types": {
      "patterns": [
        {
          "match": "(?-mix:(?<!\\w)(?:bool|int|float|void|string|char|nil|any)(?!\\w))",
          "name": "storage.type.built-in.primitive.drast"
        },
        {
          "match": "(?-mix:\\b(enum|struct|union)\\b)",
          "name": "storage.type.$1.drast"
        },
        {
          "name": "meta.asm.drast",
          "begin": "(\\b(?:asm)\\b)\\s*((?:volatile)?)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.asm.drast"
            },
            "2": {
              "name": "storage.modifier.drast"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "begin": "(\")",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.definition.string.begin.assembly.drast"
                }
              },
              "end": "(\")",
              "endCaptures": {
                "1": {
                  "name": "punctuation.definition.string.end.assembly.drast"
                }
              }
            }
          ]
        }
      ]
    },
    "modifiers": {
      "name": "keyword.control.modifier.drast",
      "match": "\\b(extern|private|volatile)\\b"
    },
    "constants": {
      "match": "\\b(nil|true|false)\\b",
      "name": "constant.language.drast"
    },
    "operators": {
      "patterns": [
        {
          "match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
          "name": "keyword.operator.assignment.compound.drast"
        },
        {
          "match": "&=|\\^=|<<=|>>=|\\|=",
          "name": "keyword.operator.assignment.compound.bitwise.drast"
        },
        {
          "match": "<<|>>",
          "name": "keyword.operator.bitwise.shift.drast"
        },
        {
          "match": "!=|<=|>=|==|<|>",
          "name": "keyword.operator.comparison.drast"
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical.drast"
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator.drast"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.drast"
        },
        {
          "match": "%|\\*|/|-|\\+",
          "name": "keyword.operator.drast"
        },
        {
          "begin": "(\\?)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.ternary.drast"
            }
          },
          "end": "(:)",
          "endCaptures": {
            "1": {
              "name": "keyword.operator.ternary.drast"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "numbers": {
      "match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
      "captures": {
        "0": {
          "patterns": [
            {
              "begin": "(?=.)",
              "end": "$",
              "patterns": [
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.drast"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.drast",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "constant.numeric.hexadecimal.drast"
                    },
                    "5": {
                      "name": "constant.numeric.hexadecimal.drast",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "6": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "8": {
                      "name": "keyword.other.unit.exponent.hexadecimal.drast"
                    },
                    "9": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.drast"
                    },
                    "10": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.drast"
                    },
                    "11": {
                      "name": "constant.numeric.exponent.hexadecimal.drast",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "12": {
                      "name": "keyword.other.unit.suffix.floating-point.drast"
                    }
                  }
                },
                {
                  "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
                  "captures": {
                    "2": {
                      "name": "constant.numeric.decimal.drast",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "constant.numeric.decimal.point.drast"
                    },
                    "5": {
                      "name": "constant.numeric.decimal.drast",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "6": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "8": {
                      "name": "keyword.other.unit.exponent.decimal.drast"
                    },
                    "9": {
                      "name": "keyword.operator.plus.exponent.decimal.drast"
                    },
                    "10": {
                      "name": "keyword.operator.minus.exponent.decimal.drast"
                    },
                    "11": {
                      "name": "constant.numeric.exponent.decimal.drast",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "12": {
                      "name": "keyword.other.unit.suffix.floating-point.drast"
                    }
                  }
                },
                {
                  "match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.binary.drast"
                    },
                    "2": {
                      "name": "constant.numeric.binary.drast",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.drast"
                    }
                  }
                },
                {
                  "match": "(\\G0[oO])((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.octal.drast"
                    },
                    "2": {
                      "name": "constant.numeric.octal.drast",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.drast"
                    }
                  }
                },
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.drast"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.drast",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "5": {
                      "name": "keyword.other.unit.exponent.hexadecimal.drast"
                    },
                    "6": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.drast"
                    },
                    "7": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.drast"
                    },
                    "8": {
                      "name": "constant.numeric.exponent.hexadecimal.drast",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "9": {
                      "name": "keyword.other.unit.suffix.integer.drast"
                    }
                  }
                },
                {
                  "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "2": {
                      "name": "constant.numeric.decimal.drast",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "5": {
                      "name": "keyword.other.unit.exponent.decimal.drast"
                    },
                    "6": {
                      "name": "keyword.operator.plus.exponent.decimal.drast"
                    },
                    "7": {
                      "name": "keyword.operator.minus.exponent.decimal.drast"
                    },
                    "8": {
                      "name": "constant.numeric.exponent.decimal.drast",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "9": {
                      "name": "keyword.other.unit.suffix.integer.drast"
                    }
                  }
                },
                {
                  "match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
                  "name": "invalid.illegal.constant.numeric"
                }
              ]
            }
          ]
        }
      }
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.drast",
          "patterns": [
            {
              "include": "#stringcontent"
            }
          ],
          "begin": "\"",
          "end": "\""
        },
        {
          "name": "string.quoted.single.drast",
          "patterns": [
            {
              "include": "#stringcontent"
            }
          ],
          "begin": "'",
          "end": "'"
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "name": "constant.character.escape",
          "match": "\\\\([nrt'\"\\\\]|(x[0-9a-fA-F]{2})|(u\\{[0-9a-fA-F]+\\}))"
        },
        {
          "name": "invalid.illegal.unrecognized-string-escape",
          "match": "\\\\."
        }
      ]
    },
    "function_call": {
      "patterns": [
        {
          "match": "(\\.)\\s*([a-zA-Z_$][\\w$]*)",
          "captures": {
            "2": {
              "name": "entity.name.function.drast"
            }
          }
        },
        {
          "match": "([A-Za-z_$][\\w$]*)\\s*(\\()",
          "captures": {
            "1": {
              "name": "entity.name.function.drast"
            }
          }
        }
      ]
    }
  }
}