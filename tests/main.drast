//
// Drast Programming Language Tests
//

tokens.insertAt@(Token, Token)()

import io

struct Test {
    @() {
        self.test =  40
        self.test(.test)
        return self.returnEqualToken(.greater, .greater_equal)
    }
}

struct Pair : @(struct first_type, struct second_type) {
     first_type :: first(first_type)
     second_type :: second(second_type)
}

pair@(Token, Token) tokens

// tokens.insertAt@(Token, Token)()

// tokens.insertAt@Token()
struct Vector : @(struct type) {
    void :: insertAt(type, int position)

    void :: insertAt(type, int position) : @(struct first_type) {

    }
}

// john_doe.insertAt

end:

extern int :: printf(string format, ...)

struct Person {
    int age; int test

    @(int age) {
        self.age = age
        self.source = source
        self.line = 1
        self.column = 1
        self.index = 0
        self.start = self.index
    }
}

enum Color {
    Red = 50,
    Green,
    Blue
}

int :: operator[](float offset) {
    return self.items[offset]
}

asm (
"loop:"
        "cli"
        "htl"
        "jmp loop"
    "mov rax, 0"
)


extern int[]*? :: hello(int test, ...) {
    for (int i = 0, i < 10, i += 1) {
        i += 30
    }

    print(.test)
    Person john = .init(50, 40)
    john.name.at(40) = "John"
    int[]*? result = test
    int test = myFunction()
    int test = 50 + 30 + 40 + (30 * 40)
    int test = 40 + myFunction(50 + 230, 40 + 20, "flaskdfm") + 50

    bool test = true

    if (test) {
        bool test = 59
    } else if (test) {
        bool test = 59
    } else {
        bool test = 59
    }
    goto end

    myFunction()

    int i = 500
    while (i > 40) {
        print("Hello World")

        i -= 1
        break
    }

    float floatnum = 40.3
    int hexnum = 0xFFFFFFFFFFFF
    int octnum = 0o43

    char op = '+'
    int first = 30
    int second = 40
    int value

    int test = cast!(53.4, int)

    switch (op) {
        case '+':
            value = first + second
        case '-':
                value = first - second
        case '*':
                value = first * second
        case '/':
                value = first - second
    }

    int? test = try? myTestFunction()


    do {
        int wer = try myTestFunction()
    } catch {
        print("Error")
    }

    hello.i.am.testing.my.programming.languages.ability.to.parse.things@(Token, Token)().like.these().with.function.calls().and.variables

end:
    return 50 + 30 + 40
}
