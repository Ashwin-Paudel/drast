//
// Drast Programming Language Tests
//

import io

struct Main {
    var tokens: pair@(Token, Token)
}

tokens.insertAt@(Token, Token)().Token@(Token, Token)().testFunction().test_variable

func functionThatReturnsAnyType(myArgument: any = 50): any! {
    var i: i32 = myArgument
    var test: any = 40
    return i
}

extern func printf(format: string, ... args): i32

func print(... args) {
    for (arg in args) |var index: i32| {
        switch (typeof(arg)) {
            case "string":
            case "i32":
        }
    }
}

struct Test {
    @() {
        self.test =  40
        self.test(.test)
        return self.returnEqualToken(.greater, .greater_equal)
    }

    ~(){
        var test = 40
    }
}

struct Pair : @(struct first_type, struct second_type) {
     func first(first_type): first_type
     func second(second_type): second_type
}

// tokens.insertAt@(Token, Token)()

// tokens.insertAt@Token()
struct Vector : @(struct type) {
    // void :: insertAt(type, i32 position)

    func insertAt(type, position: i32) || @(struct first_type) {

    }
}

// john_doe.insertAt

end:

struct Person {
    var age: i32; var test: i32

    @(age: i32) {
        self.age = age
        self.source = source
        self.line = 1
        self.column = 1
        self.index = 0
        self.start = self.index
    }
}

enum Color {
    Red = 50,
    Green,
    Blue
}

func operator[](offset: f32): i32 {
    return self.items[offset]
}

asm (
"loop:"
        "cli"
        "htl"
        "jmp loop"
    "mov rax, 0"
)


extern func hello(test: i32, ... args): i32[]*? {
    for (var i = 0, i < 10, i += 1) {
        i += 30
    }

    print(.test)
    var john: Person = .init(50, 40)
    john.name.at(40) = "John"
    var result: i32[]*? = test
    var test: i32 = myFunction()
    var test1: i32 = 50 + 30 + 40 + (30 * 40)
    var test2: i32 = 40 + myFunction(50 + 230, 40 + 20, "flaskdfm") + 50

    var test3 = true

    if (test) {
        var test = 59
    } else if (test) {
        var test = 59
    } else {
        var test = 59
    }
    goto end

    myFunction()

    var i = 500
    while (i > 40) {
        print("Hello World")

        i -= 1
        break
    }

    var floatnum: f32 = 40.3
    var hexnum = 0xFFFFFFFFFFFF
    var octnum = 0o43

    var op: char = '+'
    var first: i32 = 30
    var second: i32 = 40
    var value: i32 = 0

    var test4 = cast!(53.4, i32)

    switch (op) {
        case '+':
            value = first + second
        case '-':
                value = first - second
        case '*':
                value = first * second
        case '/':
                value = first - second
    }

    var test5: i32? = try? myTestFunction()


    do {
        var wer: i32 = try myTestFunction()
    } catch {
        print("Error")
    }

    hello.i.am.testing.my.programming.languages.ability.to.parse.things@(Token, Token)().like.these().with.function.calls().and.variables

end:
    return 50 + 30 + 40
}

func main(argc: i32, argv: string[]): i32 {
    var variable = 40
    print("Hello World!", variable, "\n")

    var myArray = [30, 20, 40]

    print(myArray[0])

    var test = test == 30 ? 50 : 20

    myOtherFunction()

    var test1 = "lmao"

    return 0
}

func myOtherFunction() {
    testFunction(!{ $(a: i32, b: i32)
        return a + b
    }, 5+30)
}

func testFunction(predicate: $int(a: i32, b: i32), test: i32): i32 {
   return predicate((50 + 20) / test)
}

 main(argv: 50, argc: test + 40)
