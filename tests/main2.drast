//
// Drast Programming Language Tests
//

extern private void :: printf(string fmt, ... args)

private enum AgeCategory {
    Kid,
    Teen,
    Adult,
    Elder
}

typealias AgePointer = AgeCategory

struct Person {
    string first_name
    string last_name
    int age
    AgeCategory age_category

    @(string first_name, string last_name, int age, AgeCategory age_category) {
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.age_category = age_category
    }

    void :: print_information() {
        print("%s %s, %d, %s\n", self.first_name, self.last_name, self.age, self.age_category)
    }
}

private union Hello2 {
    int test1
    string[] test2
}

asm("
    loop:
        cli
        htl
        jmp loop
  ")

int :: multiply(int a, int b) {
    return a * b
}

string? :: myOptionalFunction() {
    return "Hello"
}

int :: main(int argc, string[] argv) {
    Person john = .init("John", "Doe", 21, AgeCategory.Adult)

    john.print_information()

    volatile int a = 1
    private volatile int b = 2
    int c = 3
    char d = 'd'
    float[]*? e = [1.0, 2.0, 3.0]
    int f = multiply(a, b)

    if (a == 1) {
        printf("a is 1\n")
    } else if (a == 2) {
        printf("a is 2\n")
    } else {
        printf("a is not 1 or 2\n")
    }

    while (a < 10) {
        a = a + 1
    }

    while (a < 10) {
        a = a + 1
    }

    for (int i = 0, i < 10, i += 1) {
        printf("%d\n", i)
    }

    switch (a) {
        case 1:
            printf("a is 1\n")
            break
        case 2:
            printf("a is 2\n")
            break
        default:
            printf("a is not 1 or 2\n")
    }

    int i = 0
    char op = '+'
    switch (op) {
        case '+': a + b
        case '-': a - b
        case '*': a * b
        case '/': a / b
        default:
            printf("Unknown operator: %c\n", op)
            return 0
    }

    multiply(a, b)

    string myString = "Hello"
    do {
        myString = try myOptionalFunction()
    } catch {
        myString = "Error"
    }

    printf("%s\n", myString)

    return 0
}

//
// Drast Programming Language Examples
//

/*
    This is a comment
*/